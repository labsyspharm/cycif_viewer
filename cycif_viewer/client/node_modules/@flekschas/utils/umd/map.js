// @flekschas/utils v0.25.0 Copyright 2020 Fritz Lekschas
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.utils = global.utils || {}));
}(this, (function (exports) { 'use strict';

  var mergeMaps = function mergeMaps(map1, map2) {
    return new Map(
    /*#__PURE__*/
    regeneratorRuntime.mark(function merge() {
      return regeneratorRuntime.wrap(function merge$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(map1, "t0", 1);

            case 1:
              return _context.delegateYield(map2, "t1", 2);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, merge);
    })());
  };

  exports.mergeMaps = mergeMaps;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
