(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('camera-2d-simple'), require('gl-matrix')) :
  typeof define === 'function' && define.amd ? define(['camera-2d-simple', 'gl-matrix'], factory) :
  (global = global || self, global.createDom2dCamera = factory(global.createCamera2d, global.glMatrix));
}(this, (function (createCamera, glMatrix) { 'use strict';

  createCamera = createCamera && createCamera.hasOwnProperty('default') ? createCamera['default'] : createCamera;

  var dom2dCamera = function (
    element,
    ref
  ) {
    if ( ref === void 0 ) ref = {};
    var distance = ref.distance; if ( distance === void 0 ) distance = 1.0;
    var target = ref.target; if ( target === void 0 ) target = [0, 0];
    var rotation = ref.rotation; if ( rotation === void 0 ) rotation = 0;
    var isNdc = ref.isNdc; if ( isNdc === void 0 ) isNdc = true;
    var isFixed = ref.isFixed; if ( isFixed === void 0 ) isFixed = false;
    var isPan = ref.isPan; if ( isPan === void 0 ) isPan = true;
    var panSpeed = ref.panSpeed; if ( panSpeed === void 0 ) panSpeed = 1;
    var isRotate = ref.isRotate; if ( isRotate === void 0 ) isRotate = true;
    var rotateSpeed = ref.rotateSpeed; if ( rotateSpeed === void 0 ) rotateSpeed = 1;
    var isZoom = ref.isZoom; if ( isZoom === void 0 ) isZoom = true;
    var zoomSpeed = ref.zoomSpeed; if ( zoomSpeed === void 0 ) zoomSpeed = 1;
    var viewCenter = ref.viewCenter;
    var scaleBounds = ref.scaleBounds;
    var onKeyDown = ref.onKeyDown; if ( onKeyDown === void 0 ) onKeyDown = function () {};
    var onKeyUp = ref.onKeyUp; if ( onKeyUp === void 0 ) onKeyUp = function () {};
    var onMouseDown = ref.onMouseDown; if ( onMouseDown === void 0 ) onMouseDown = function () {};
    var onMouseUp = ref.onMouseUp; if ( onMouseUp === void 0 ) onMouseUp = function () {};
    var onMouseMove = ref.onMouseMove; if ( onMouseMove === void 0 ) onMouseMove = function () {};
    var onWheel = ref.onWheel; if ( onWheel === void 0 ) onWheel = function () {};

    var camera = createCamera(
      target,
      distance,
      rotation,
      viewCenter,
      scaleBounds
    );
    var isChanged = false;
    var mouseX = 0;
    var mouseY = 0;
    var prevMouseX = 0;
    var prevMouseY = 0;
    var isLeftMousePressed = false;
    var yScroll = 0;

    var top = 0;
    var left = 0;
    var width = 1;
    var height = 1;
    var aspectRatio = 1;
    var isAlt = false;

    var transformPanX = isNdc
      ? function (dX) { return (dX / width) * 2 * aspectRatio; } // to normalized device coords
      : function (dX) { return dX; };
    var transformPanY = isNdc
      ? function (dY) { return (dY / height) * 2; } // to normalized device coords
      : function (dY) { return -dY; };

    var transformScaleX = isNdc
      ? function (x) { return (-1 + (x / width) * 2) * aspectRatio; } // to normalized device coords
      : function (x) { return x; };
    var transformScaleY = isNdc
      ? function (y) { return 1 - (y / height) * 2; } // to normalized device coords
      : function (y) { return y; };

    var tick = function () {
      if (isFixed) { return false; }

      isChanged = false;

      if (isPan && isLeftMousePressed && !isAlt) {
        // To pan 1:1 we need to half the width and height because the uniform
        // coordinate system goes from -1 to 1.
        camera.pan([
          transformPanX(panSpeed * (mouseX - prevMouseX)),
          transformPanY(panSpeed * (prevMouseY - mouseY))
        ]);
        isChanged = true;
      }

      if (isZoom && yScroll) {
        var dZ = zoomSpeed * Math.exp(yScroll / height);

        // Get normalized device coordinates (NDC)
        var transformedX = transformScaleX(mouseX);
        var transformedY = transformScaleY(mouseY);

        camera.scale(1 / dZ, [transformedX, transformedY]);

        isChanged = true;
      }

      if (isRotate && isLeftMousePressed && isAlt) {
        var wh = width / 2;
        var hh = height / 2;
        var x1 = prevMouseX - wh;
        var y1 = hh - prevMouseY;
        var x2 = mouseX - wh;
        var y2 = hh - mouseY;
        // Angle between the start and end mouse position with respect to the
        // viewport center
        var radians = glMatrix.vec2.angle([x1, y1], [x2, y2]);
        // Determine the orientation
        var cross = x1 * y2 - x2 * y1;

        camera.rotate(rotateSpeed * radians * Math.sign(cross));

        isChanged = true;
      }

      // Reset scroll delta and mouse position
      yScroll = 0;
      prevMouseX = mouseX;
      prevMouseY = mouseY;

      return isChanged;
    };

    var config = function (ref) {
      if ( ref === void 0 ) ref = {};
      var newIsFixed = ref.isFixed; if ( newIsFixed === void 0 ) newIsFixed = null;
      var newIsPan = ref.isPan; if ( newIsPan === void 0 ) newIsPan = null;
      var newIsRotate = ref.isRotate; if ( newIsRotate === void 0 ) newIsRotate = null;
      var newIsZoom = ref.isZoom; if ( newIsZoom === void 0 ) newIsZoom = null;
      var newPanSpeed = ref.panSpeed; if ( newPanSpeed === void 0 ) newPanSpeed = null;
      var newRotateSpeed = ref.rotateSpeed; if ( newRotateSpeed === void 0 ) newRotateSpeed = null;
      var newZoomSpeed = ref.zoomSpeed; if ( newZoomSpeed === void 0 ) newZoomSpeed = null;

      isFixed = newIsFixed !== null ? newIsFixed : isFixed;
      isPan = newIsPan !== null ? newIsPan : isPan;
      isRotate = newIsRotate !== null ? newIsRotate : isRotate;
      isZoom = newIsZoom !== null ? newIsZoom : isZoom;
      panSpeed = +newPanSpeed > 0 ? newPanSpeed : panSpeed;
      rotateSpeed = +newRotateSpeed > 0 ? newRotateSpeed : rotateSpeed;
      zoomSpeed = +newZoomSpeed > 0 ? newZoomSpeed : zoomSpeed;
    };

    var refresh = function () {
      var bBox = element.getBoundingClientRect();
      top = bBox.top;
      left = bBox.left;
      width = bBox.width;
      height = bBox.height;
      aspectRatio = width / height;
    };

    var keyUpHandler = function (event) {
      isAlt = false;

      onKeyUp(event);
    };

    var keyDownHandler = function (event) {
      isAlt = event.altKey;

      onKeyDown(event);
    };

    var mouseUpHandler = function (event) {
      isLeftMousePressed = false;

      onMouseUp(event);
    };

    var mouseDownHandler = function (event) {
      isLeftMousePressed = event.buttons === 1;

      onMouseDown(event);
    };

    var mouseMoveHandler = function (event) {
      prevMouseX = mouseX;
      prevMouseY = mouseY;
      mouseX = event.clientX - left;
      mouseY = event.clientY - top;

      onMouseMove(event);
    };

    var wheelHandler = function (event) {
      event.preventDefault();

      var scale = event.deltaMode === 1 ? 12 : 1;

      yScroll += scale * (event.deltaY || 0);

      onWheel(event);
    };

    var dispose = function () {
      camera = undefined;
      window.removeEventListener("keydown", keyDownHandler);
      window.removeEventListener("keyup", keyUpHandler);
      element.removeEventListener("mousedown", mouseDownHandler);
      window.removeEventListener("mouseup", mouseUpHandler);
      window.removeEventListener("mousemove", mouseMoveHandler);
      element.removeEventListener("wheel", wheelHandler);
    };

    window.addEventListener("keydown", keyDownHandler, { passive: true });
    window.addEventListener("keyup", keyUpHandler, { passive: true });
    element.addEventListener("mousedown", mouseDownHandler, { passive: true });
    window.addEventListener("mouseup", mouseUpHandler, { passive: true });
    window.addEventListener("mousemove", mouseMoveHandler, { passive: true });
    element.addEventListener("wheel", wheelHandler, { passive: false });

    refresh();

    camera.config = config;
    camera.dispose = dispose;
    camera.refresh = refresh;
    camera.tick = tick;

    return camera;
  };

  return dom2dCamera;

})));
